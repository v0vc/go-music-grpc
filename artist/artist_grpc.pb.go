// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: artist.proto

package artist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArtistServiceClient is the client API for ArtistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArtistServiceClient interface {
	CreateArtist(ctx context.Context, in *CreateArtistRequest, opts ...grpc.CallOption) (*CreateArtistResponse, error)
	ReadArtist(ctx context.Context, in *ReadArtistRequest, opts ...grpc.CallOption) (*ReadArtistResponse, error)
	UpdateArtist(ctx context.Context, in *UpdateArtistRequest, opts ...grpc.CallOption) (*UpdateArtistResponse, error)
	DeleteArtist(ctx context.Context, in *DeleteArtistRequest, opts ...grpc.CallOption) (*DeleteArtistResponse, error)
	ListArtist(ctx context.Context, in *ListArtistRequest, opts ...grpc.CallOption) (ArtistService_ListArtistClient, error)
}

type artistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArtistServiceClient(cc grpc.ClientConnInterface) ArtistServiceClient {
	return &artistServiceClient{cc}
}

func (c *artistServiceClient) CreateArtist(ctx context.Context, in *CreateArtistRequest, opts ...grpc.CallOption) (*CreateArtistResponse, error) {
	out := new(CreateArtistResponse)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/CreateArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) ReadArtist(ctx context.Context, in *ReadArtistRequest, opts ...grpc.CallOption) (*ReadArtistResponse, error) {
	out := new(ReadArtistResponse)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/ReadArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) UpdateArtist(ctx context.Context, in *UpdateArtistRequest, opts ...grpc.CallOption) (*UpdateArtistResponse, error) {
	out := new(UpdateArtistResponse)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/UpdateArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) DeleteArtist(ctx context.Context, in *DeleteArtistRequest, opts ...grpc.CallOption) (*DeleteArtistResponse, error) {
	out := new(DeleteArtistResponse)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/DeleteArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) ListArtist(ctx context.Context, in *ListArtistRequest, opts ...grpc.CallOption) (ArtistService_ListArtistClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArtistService_ServiceDesc.Streams[0], "/artist.ArtistService/ListArtist", opts...)
	if err != nil {
		return nil, err
	}
	x := &artistServiceListArtistClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ArtistService_ListArtistClient interface {
	Recv() (*ListArtistResponse, error)
	grpc.ClientStream
}

type artistServiceListArtistClient struct {
	grpc.ClientStream
}

func (x *artistServiceListArtistClient) Recv() (*ListArtistResponse, error) {
	m := new(ListArtistResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArtistServiceServer is the server API for ArtistService service.
// All implementations must embed UnimplementedArtistServiceServer
// for forward compatibility
type ArtistServiceServer interface {
	CreateArtist(context.Context, *CreateArtistRequest) (*CreateArtistResponse, error)
	ReadArtist(context.Context, *ReadArtistRequest) (*ReadArtistResponse, error)
	UpdateArtist(context.Context, *UpdateArtistRequest) (*UpdateArtistResponse, error)
	DeleteArtist(context.Context, *DeleteArtistRequest) (*DeleteArtistResponse, error)
	ListArtist(*ListArtistRequest, ArtistService_ListArtistServer) error
	mustEmbedUnimplementedArtistServiceServer()
}

// UnimplementedArtistServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArtistServiceServer struct {
}

func (UnimplementedArtistServiceServer) CreateArtist(context.Context, *CreateArtistRequest) (*CreateArtistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArtist not implemented")
}
func (UnimplementedArtistServiceServer) ReadArtist(context.Context, *ReadArtistRequest) (*ReadArtistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadArtist not implemented")
}
func (UnimplementedArtistServiceServer) UpdateArtist(context.Context, *UpdateArtistRequest) (*UpdateArtistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArtist not implemented")
}
func (UnimplementedArtistServiceServer) DeleteArtist(context.Context, *DeleteArtistRequest) (*DeleteArtistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArtist not implemented")
}
func (UnimplementedArtistServiceServer) ListArtist(*ListArtistRequest, ArtistService_ListArtistServer) error {
	return status.Errorf(codes.Unimplemented, "method ListArtist not implemented")
}
func (UnimplementedArtistServiceServer) mustEmbedUnimplementedArtistServiceServer() {}

// UnsafeArtistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArtistServiceServer will
// result in compilation errors.
type UnsafeArtistServiceServer interface {
	mustEmbedUnimplementedArtistServiceServer()
}

func RegisterArtistServiceServer(s grpc.ServiceRegistrar, srv ArtistServiceServer) {
	s.RegisterService(&ArtistService_ServiceDesc, srv)
}

func _ArtistService_CreateArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArtistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).CreateArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/CreateArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).CreateArtist(ctx, req.(*CreateArtistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_ReadArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadArtistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).ReadArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/ReadArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).ReadArtist(ctx, req.(*ReadArtistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_UpdateArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArtistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).UpdateArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/UpdateArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).UpdateArtist(ctx, req.(*UpdateArtistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_DeleteArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArtistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).DeleteArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/DeleteArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).DeleteArtist(ctx, req.(*DeleteArtistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_ListArtist_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListArtistRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArtistServiceServer).ListArtist(m, &artistServiceListArtistServer{stream})
}

type ArtistService_ListArtistServer interface {
	Send(*ListArtistResponse) error
	grpc.ServerStream
}

type artistServiceListArtistServer struct {
	grpc.ServerStream
}

func (x *artistServiceListArtistServer) Send(m *ListArtistResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ArtistService_ServiceDesc is the grpc.ServiceDesc for ArtistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArtistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "artist.ArtistService",
	HandlerType: (*ArtistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArtist",
			Handler:    _ArtistService_CreateArtist_Handler,
		},
		{
			MethodName: "ReadArtist",
			Handler:    _ArtistService_ReadArtist_Handler,
		},
		{
			MethodName: "UpdateArtist",
			Handler:    _ArtistService_UpdateArtist_Handler,
		},
		{
			MethodName: "DeleteArtist",
			Handler:    _ArtistService_DeleteArtist_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListArtist",
			Handler:       _ArtistService_ListArtist_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "artist.proto",
}

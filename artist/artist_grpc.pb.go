// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: artist.proto

package artist

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArtistServiceClient is the client API for ArtistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArtistServiceClient interface {
	SyncArtist(ctx context.Context, in *SyncArtistRequest, opts ...grpc.CallOption) (*SyncArtistResponse, error)
	SyncArtistStream(ctx context.Context, in *SyncArtistRequest, opts ...grpc.CallOption) (ArtistService_SyncArtistStreamClient, error)
	ReadArtistAlbums(ctx context.Context, in *ReadArtistAlbumRequest, opts ...grpc.CallOption) (*ReadArtistAlbumResponse, error)
	ReadNewAlbums(ctx context.Context, in *ListArtistRequest, opts ...grpc.CallOption) (*ReadArtistAlbumResponse, error)
	SyncAlbum(ctx context.Context, in *SyncAlbumRequest, opts ...grpc.CallOption) (*SyncAlbumResponse, error)
	ReadAlbumTracks(ctx context.Context, in *ReadAlbumTrackRequest, opts ...grpc.CallOption) (*ReadAlbumTrackResponse, error)
	DeleteArtist(ctx context.Context, in *DeleteArtistRequest, opts ...grpc.CallOption) (*DeleteArtistResponse, error)
	ClearSync(ctx context.Context, in *ClearSyncRequest, opts ...grpc.CallOption) (*ClearSyncResponse, error)
	DownloadAlbums(ctx context.Context, in *DownloadAlbumsRequest, opts ...grpc.CallOption) (*DownloadAlbumsResponse, error)
	DownloadArtist(ctx context.Context, in *DownloadArtistRequest, opts ...grpc.CallOption) (*DownloadAlbumsResponse, error)
	DownloadTracks(ctx context.Context, in *DownloadTracksRequest, opts ...grpc.CallOption) (*DownloadTracksResponse, error)
	ListArtist(ctx context.Context, in *ListArtistRequest, opts ...grpc.CallOption) (*ListArtistResponse, error)
	ListArtistStream(ctx context.Context, in *ListArtistRequest, opts ...grpc.CallOption) (ArtistService_ListArtistStreamClient, error)
}

type artistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArtistServiceClient(cc grpc.ClientConnInterface) ArtistServiceClient {
	return &artistServiceClient{cc}
}

func (c *artistServiceClient) SyncArtist(ctx context.Context, in *SyncArtistRequest, opts ...grpc.CallOption) (*SyncArtistResponse, error) {
	out := new(SyncArtistResponse)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/SyncArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) SyncArtistStream(ctx context.Context, in *SyncArtistRequest, opts ...grpc.CallOption) (ArtistService_SyncArtistStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArtistService_ServiceDesc.Streams[0], "/artist.ArtistService/SyncArtistStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &artistServiceSyncArtistStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ArtistService_SyncArtistStreamClient interface {
	Recv() (*SyncArtistResponse, error)
	grpc.ClientStream
}

type artistServiceSyncArtistStreamClient struct {
	grpc.ClientStream
}

func (x *artistServiceSyncArtistStreamClient) Recv() (*SyncArtistResponse, error) {
	m := new(SyncArtistResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *artistServiceClient) ReadArtistAlbums(ctx context.Context, in *ReadArtistAlbumRequest, opts ...grpc.CallOption) (*ReadArtistAlbumResponse, error) {
	out := new(ReadArtistAlbumResponse)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/ReadArtistAlbums", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) ReadNewAlbums(ctx context.Context, in *ListArtistRequest, opts ...grpc.CallOption) (*ReadArtistAlbumResponse, error) {
	out := new(ReadArtistAlbumResponse)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/ReadNewAlbums", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) SyncAlbum(ctx context.Context, in *SyncAlbumRequest, opts ...grpc.CallOption) (*SyncAlbumResponse, error) {
	out := new(SyncAlbumResponse)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/SyncAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) ReadAlbumTracks(ctx context.Context, in *ReadAlbumTrackRequest, opts ...grpc.CallOption) (*ReadAlbumTrackResponse, error) {
	out := new(ReadAlbumTrackResponse)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/ReadAlbumTracks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) DeleteArtist(ctx context.Context, in *DeleteArtistRequest, opts ...grpc.CallOption) (*DeleteArtistResponse, error) {
	out := new(DeleteArtistResponse)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/DeleteArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) ClearSync(ctx context.Context, in *ClearSyncRequest, opts ...grpc.CallOption) (*ClearSyncResponse, error) {
	out := new(ClearSyncResponse)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/ClearSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) DownloadAlbums(ctx context.Context, in *DownloadAlbumsRequest, opts ...grpc.CallOption) (*DownloadAlbumsResponse, error) {
	out := new(DownloadAlbumsResponse)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/DownloadAlbums", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) DownloadArtist(ctx context.Context, in *DownloadArtistRequest, opts ...grpc.CallOption) (*DownloadAlbumsResponse, error) {
	out := new(DownloadAlbumsResponse)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/DownloadArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) DownloadTracks(ctx context.Context, in *DownloadTracksRequest, opts ...grpc.CallOption) (*DownloadTracksResponse, error) {
	out := new(DownloadTracksResponse)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/DownloadTracks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) ListArtist(ctx context.Context, in *ListArtistRequest, opts ...grpc.CallOption) (*ListArtistResponse, error) {
	out := new(ListArtistResponse)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/ListArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) ListArtistStream(ctx context.Context, in *ListArtistRequest, opts ...grpc.CallOption) (ArtistService_ListArtistStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArtistService_ServiceDesc.Streams[1], "/artist.ArtistService/ListArtistStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &artistServiceListArtistStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ArtistService_ListArtistStreamClient interface {
	Recv() (*ListArtistStreamResponse, error)
	grpc.ClientStream
}

type artistServiceListArtistStreamClient struct {
	grpc.ClientStream
}

func (x *artistServiceListArtistStreamClient) Recv() (*ListArtistStreamResponse, error) {
	m := new(ListArtistStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArtistServiceServer is the server API for ArtistService service.
// All implementations must embed UnimplementedArtistServiceServer
// for forward compatibility
type ArtistServiceServer interface {
	SyncArtist(context.Context, *SyncArtistRequest) (*SyncArtistResponse, error)
	SyncArtistStream(*SyncArtistRequest, ArtistService_SyncArtistStreamServer) error
	ReadArtistAlbums(context.Context, *ReadArtistAlbumRequest) (*ReadArtistAlbumResponse, error)
	ReadNewAlbums(context.Context, *ListArtistRequest) (*ReadArtistAlbumResponse, error)
	SyncAlbum(context.Context, *SyncAlbumRequest) (*SyncAlbumResponse, error)
	ReadAlbumTracks(context.Context, *ReadAlbumTrackRequest) (*ReadAlbumTrackResponse, error)
	DeleteArtist(context.Context, *DeleteArtistRequest) (*DeleteArtistResponse, error)
	ClearSync(context.Context, *ClearSyncRequest) (*ClearSyncResponse, error)
	DownloadAlbums(context.Context, *DownloadAlbumsRequest) (*DownloadAlbumsResponse, error)
	DownloadArtist(context.Context, *DownloadArtistRequest) (*DownloadAlbumsResponse, error)
	DownloadTracks(context.Context, *DownloadTracksRequest) (*DownloadTracksResponse, error)
	ListArtist(context.Context, *ListArtistRequest) (*ListArtistResponse, error)
	ListArtistStream(*ListArtistRequest, ArtistService_ListArtistStreamServer) error
	mustEmbedUnimplementedArtistServiceServer()
}

// UnimplementedArtistServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArtistServiceServer struct {
}

func (UnimplementedArtistServiceServer) SyncArtist(context.Context, *SyncArtistRequest) (*SyncArtistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncArtist not implemented")
}
func (UnimplementedArtistServiceServer) SyncArtistStream(*SyncArtistRequest, ArtistService_SyncArtistStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncArtistStream not implemented")
}
func (UnimplementedArtistServiceServer) ReadArtistAlbums(context.Context, *ReadArtistAlbumRequest) (*ReadArtistAlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadArtistAlbums not implemented")
}
func (UnimplementedArtistServiceServer) ReadNewAlbums(context.Context, *ListArtistRequest) (*ReadArtistAlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadNewAlbums not implemented")
}
func (UnimplementedArtistServiceServer) SyncAlbum(context.Context, *SyncAlbumRequest) (*SyncAlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncAlbum not implemented")
}
func (UnimplementedArtistServiceServer) ReadAlbumTracks(context.Context, *ReadAlbumTrackRequest) (*ReadAlbumTrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAlbumTracks not implemented")
}
func (UnimplementedArtistServiceServer) DeleteArtist(context.Context, *DeleteArtistRequest) (*DeleteArtistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArtist not implemented")
}
func (UnimplementedArtistServiceServer) ClearSync(context.Context, *ClearSyncRequest) (*ClearSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearSync not implemented")
}
func (UnimplementedArtistServiceServer) DownloadAlbums(context.Context, *DownloadAlbumsRequest) (*DownloadAlbumsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadAlbums not implemented")
}
func (UnimplementedArtistServiceServer) DownloadArtist(context.Context, *DownloadArtistRequest) (*DownloadAlbumsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadArtist not implemented")
}
func (UnimplementedArtistServiceServer) DownloadTracks(context.Context, *DownloadTracksRequest) (*DownloadTracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadTracks not implemented")
}
func (UnimplementedArtistServiceServer) ListArtist(context.Context, *ListArtistRequest) (*ListArtistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArtist not implemented")
}
func (UnimplementedArtistServiceServer) ListArtistStream(*ListArtistRequest, ArtistService_ListArtistStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ListArtistStream not implemented")
}
func (UnimplementedArtistServiceServer) mustEmbedUnimplementedArtistServiceServer() {}

// UnsafeArtistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArtistServiceServer will
// result in compilation errors.
type UnsafeArtistServiceServer interface {
	mustEmbedUnimplementedArtistServiceServer()
}

func RegisterArtistServiceServer(s grpc.ServiceRegistrar, srv ArtistServiceServer) {
	s.RegisterService(&ArtistService_ServiceDesc, srv)
}

func _ArtistService_SyncArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncArtistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).SyncArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/SyncArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).SyncArtist(ctx, req.(*SyncArtistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_SyncArtistStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncArtistRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArtistServiceServer).SyncArtistStream(m, &artistServiceSyncArtistStreamServer{stream})
}

type ArtistService_SyncArtistStreamServer interface {
	Send(*SyncArtistResponse) error
	grpc.ServerStream
}

type artistServiceSyncArtistStreamServer struct {
	grpc.ServerStream
}

func (x *artistServiceSyncArtistStreamServer) Send(m *SyncArtistResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ArtistService_ReadArtistAlbums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadArtistAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).ReadArtistAlbums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/ReadArtistAlbums",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).ReadArtistAlbums(ctx, req.(*ReadArtistAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_ReadNewAlbums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArtistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).ReadNewAlbums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/ReadNewAlbums",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).ReadNewAlbums(ctx, req.(*ListArtistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_SyncAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).SyncAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/SyncAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).SyncAlbum(ctx, req.(*SyncAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_ReadAlbumTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAlbumTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).ReadAlbumTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/ReadAlbumTracks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).ReadAlbumTracks(ctx, req.(*ReadAlbumTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_DeleteArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArtistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).DeleteArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/DeleteArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).DeleteArtist(ctx, req.(*DeleteArtistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_ClearSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).ClearSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/ClearSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).ClearSync(ctx, req.(*ClearSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_DownloadAlbums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadAlbumsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).DownloadAlbums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/DownloadAlbums",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).DownloadAlbums(ctx, req.(*DownloadAlbumsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_DownloadArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadArtistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).DownloadArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/DownloadArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).DownloadArtist(ctx, req.(*DownloadArtistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_DownloadTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadTracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).DownloadTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/DownloadTracks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).DownloadTracks(ctx, req.(*DownloadTracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_ListArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArtistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).ListArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/ListArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).ListArtist(ctx, req.(*ListArtistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_ListArtistStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListArtistRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArtistServiceServer).ListArtistStream(m, &artistServiceListArtistStreamServer{stream})
}

type ArtistService_ListArtistStreamServer interface {
	Send(*ListArtistStreamResponse) error
	grpc.ServerStream
}

type artistServiceListArtistStreamServer struct {
	grpc.ServerStream
}

func (x *artistServiceListArtistStreamServer) Send(m *ListArtistStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ArtistService_ServiceDesc is the grpc.ServiceDesc for ArtistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArtistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "artist.ArtistService",
	HandlerType: (*ArtistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncArtist",
			Handler:    _ArtistService_SyncArtist_Handler,
		},
		{
			MethodName: "ReadArtistAlbums",
			Handler:    _ArtistService_ReadArtistAlbums_Handler,
		},
		{
			MethodName: "ReadNewAlbums",
			Handler:    _ArtistService_ReadNewAlbums_Handler,
		},
		{
			MethodName: "SyncAlbum",
			Handler:    _ArtistService_SyncAlbum_Handler,
		},
		{
			MethodName: "ReadAlbumTracks",
			Handler:    _ArtistService_ReadAlbumTracks_Handler,
		},
		{
			MethodName: "DeleteArtist",
			Handler:    _ArtistService_DeleteArtist_Handler,
		},
		{
			MethodName: "ClearSync",
			Handler:    _ArtistService_ClearSync_Handler,
		},
		{
			MethodName: "DownloadAlbums",
			Handler:    _ArtistService_DownloadAlbums_Handler,
		},
		{
			MethodName: "DownloadArtist",
			Handler:    _ArtistService_DownloadArtist_Handler,
		},
		{
			MethodName: "DownloadTracks",
			Handler:    _ArtistService_DownloadTracks_Handler,
		},
		{
			MethodName: "ListArtist",
			Handler:    _ArtistService_ListArtist_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncArtistStream",
			Handler:       _ArtistService_SyncArtistStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListArtistStream",
			Handler:       _ArtistService_ListArtistStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "artist.proto",
}

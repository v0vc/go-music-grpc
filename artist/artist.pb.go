// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: artist.proto

package artist

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Artist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SiteId     uint32      `protobuf:"varint,2,opt,name=siteId,proto3" json:"siteId,omitempty"`
	ArtistId   string      `protobuf:"bytes,3,opt,name=artistId,proto3" json:"artistId,omitempty"`
	Title      string      `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Thumbnail  []byte      `protobuf:"bytes,5,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	UserAdded  bool        `protobuf:"varint,6,opt,name=userAdded,proto3" json:"userAdded,omitempty"`
	NewAlbs    int32       `protobuf:"varint,7,opt,name=newAlbs,proto3" json:"newAlbs,omitempty"`
	Albums     []*Album    `protobuf:"bytes,8,rep,name=albums,proto3" json:"albums,omitempty"`
	Playlists  []*Playlist `protobuf:"bytes,9,rep,name=playlists,proto3" json:"playlists,omitempty"`
	DeletedAlb []string    `protobuf:"bytes,10,rep,name=deletedAlb,proto3" json:"deletedAlb,omitempty"`
}

func (x *Artist) Reset() {
	*x = Artist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Artist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Artist) ProtoMessage() {}

func (x *Artist) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Artist.ProtoReflect.Descriptor instead.
func (*Artist) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{0}
}

func (x *Artist) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Artist) GetSiteId() uint32 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

func (x *Artist) GetArtistId() string {
	if x != nil {
		return x.ArtistId
	}
	return ""
}

func (x *Artist) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Artist) GetThumbnail() []byte {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

func (x *Artist) GetUserAdded() bool {
	if x != nil {
		return x.UserAdded
	}
	return false
}

func (x *Artist) GetNewAlbs() int32 {
	if x != nil {
		return x.NewAlbs
	}
	return 0
}

func (x *Artist) GetAlbums() []*Album {
	if x != nil {
		return x.Albums
	}
	return nil
}

func (x *Artist) GetPlaylists() []*Playlist {
	if x != nil {
		return x.Playlists
	}
	return nil
}

func (x *Artist) GetDeletedAlb() []string {
	if x != nil {
		return x.DeletedAlb
	}
	return nil
}

type Album struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AlbumId     string   `protobuf:"bytes,2,opt,name=albumId,proto3" json:"albumId,omitempty"`
	Title       string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	SubTitle    string   `protobuf:"bytes,4,opt,name=subTitle,proto3" json:"subTitle,omitempty"`
	ReleaseDate string   `protobuf:"bytes,5,opt,name=releaseDate,proto3" json:"releaseDate,omitempty"`
	ReleaseType int32    `protobuf:"varint,6,opt,name=releaseType,proto3" json:"releaseType,omitempty"`
	LikeCount   int32    `protobuf:"varint,7,opt,name=likeCount,proto3" json:"likeCount,omitempty"`
	ViewCount   int32    `protobuf:"varint,8,opt,name=viewCount,proto3" json:"viewCount,omitempty"`
	Thumbnail   []byte   `protobuf:"bytes,9,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	SyncState   int32    `protobuf:"varint,10,opt,name=syncState,proto3" json:"syncState,omitempty"`
	ListState   int32    `protobuf:"varint,11,opt,name=listState,proto3" json:"listState,omitempty"`
	WatchState  int32    `protobuf:"varint,12,opt,name=watchState,proto3" json:"watchState,omitempty"`
	ArtistIds   []string `protobuf:"bytes,13,rep,name=artistIds,proto3" json:"artistIds,omitempty"`
	Quality     float32  `protobuf:"fixed32,14,opt,name=quality,proto3" json:"quality,omitempty"`
}

func (x *Album) Reset() {
	*x = Album{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Album) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Album) ProtoMessage() {}

func (x *Album) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Album.ProtoReflect.Descriptor instead.
func (*Album) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{1}
}

func (x *Album) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Album) GetAlbumId() string {
	if x != nil {
		return x.AlbumId
	}
	return ""
}

func (x *Album) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Album) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *Album) GetReleaseDate() string {
	if x != nil {
		return x.ReleaseDate
	}
	return ""
}

func (x *Album) GetReleaseType() int32 {
	if x != nil {
		return x.ReleaseType
	}
	return 0
}

func (x *Album) GetLikeCount() int32 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *Album) GetViewCount() int32 {
	if x != nil {
		return x.ViewCount
	}
	return 0
}

func (x *Album) GetThumbnail() []byte {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

func (x *Album) GetSyncState() int32 {
	if x != nil {
		return x.SyncState
	}
	return 0
}

func (x *Album) GetListState() int32 {
	if x != nil {
		return x.ListState
	}
	return 0
}

func (x *Album) GetWatchState() int32 {
	if x != nil {
		return x.WatchState
	}
	return 0
}

func (x *Album) GetArtistIds() []string {
	if x != nil {
		return x.ArtistIds
	}
	return nil
}

func (x *Album) GetQuality() float32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

type Playlist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PlaylistId   string   `protobuf:"bytes,2,opt,name=playlistId,proto3" json:"playlistId,omitempty"`
	Title        string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Thumbnail    []byte   `protobuf:"bytes,4,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	PlaylistType int32    `protobuf:"varint,5,opt,name=playlistType,proto3" json:"playlistType,omitempty"`
	VideoIds     []string `protobuf:"bytes,6,rep,name=videoIds,proto3" json:"videoIds,omitempty"`
}

func (x *Playlist) Reset() {
	*x = Playlist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Playlist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Playlist) ProtoMessage() {}

func (x *Playlist) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Playlist.ProtoReflect.Descriptor instead.
func (*Playlist) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{2}
}

func (x *Playlist) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Playlist) GetPlaylistId() string {
	if x != nil {
		return x.PlaylistId
	}
	return ""
}

func (x *Playlist) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Playlist) GetThumbnail() []byte {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

func (x *Playlist) GetPlaylistType() int32 {
	if x != nil {
		return x.PlaylistType
	}
	return 0
}

func (x *Playlist) GetVideoIds() []string {
	if x != nil {
		return x.VideoIds
	}
	return nil
}

type SyncArtistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteId   uint32 `protobuf:"varint,1,opt,name=siteId,proto3" json:"siteId,omitempty"`
	ArtistId string `protobuf:"bytes,2,opt,name=artistId,proto3" json:"artistId,omitempty"`
	IsAdd    bool   `protobuf:"varint,3,opt,name=isAdd,proto3" json:"isAdd,omitempty"`
}

func (x *SyncArtistRequest) Reset() {
	*x = SyncArtistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncArtistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncArtistRequest) ProtoMessage() {}

func (x *SyncArtistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncArtistRequest.ProtoReflect.Descriptor instead.
func (*SyncArtistRequest) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{3}
}

func (x *SyncArtistRequest) GetSiteId() uint32 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

func (x *SyncArtistRequest) GetArtistId() string {
	if x != nil {
		return x.ArtistId
	}
	return ""
}

func (x *SyncArtistRequest) GetIsAdd() bool {
	if x != nil {
		return x.IsAdd
	}
	return false
}

type SyncArtistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artists []*Artist `protobuf:"bytes,1,rep,name=artists,proto3" json:"artists,omitempty"`
}

func (x *SyncArtistResponse) Reset() {
	*x = SyncArtistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncArtistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncArtistResponse) ProtoMessage() {}

func (x *SyncArtistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncArtistResponse.ProtoReflect.Descriptor instead.
func (*SyncArtistResponse) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{4}
}

func (x *SyncArtistResponse) GetArtists() []*Artist {
	if x != nil {
		return x.Artists
	}
	return nil
}

type ReadArtistAlbumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteId   uint32 `protobuf:"varint,1,opt,name=siteId,proto3" json:"siteId,omitempty"`
	ArtistId string `protobuf:"bytes,2,opt,name=artistId,proto3" json:"artistId,omitempty"`
	NewOnly  bool   `protobuf:"varint,3,opt,name=newOnly,proto3" json:"newOnly,omitempty"`
}

func (x *ReadArtistAlbumRequest) Reset() {
	*x = ReadArtistAlbumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadArtistAlbumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadArtistAlbumRequest) ProtoMessage() {}

func (x *ReadArtistAlbumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadArtistAlbumRequest.ProtoReflect.Descriptor instead.
func (*ReadArtistAlbumRequest) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{5}
}

func (x *ReadArtistAlbumRequest) GetSiteId() uint32 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

func (x *ReadArtistAlbumRequest) GetArtistId() string {
	if x != nil {
		return x.ArtistId
	}
	return ""
}

func (x *ReadArtistAlbumRequest) GetNewOnly() bool {
	if x != nil {
		return x.NewOnly
	}
	return false
}

type ReadArtistAlbumResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Releases  []*Album    `protobuf:"bytes,1,rep,name=releases,proto3" json:"releases,omitempty"`
	Playlists []*Playlist `protobuf:"bytes,2,rep,name=playlists,proto3" json:"playlists,omitempty"`
}

func (x *ReadArtistAlbumResponse) Reset() {
	*x = ReadArtistAlbumResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadArtistAlbumResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadArtistAlbumResponse) ProtoMessage() {}

func (x *ReadArtistAlbumResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadArtistAlbumResponse.ProtoReflect.Descriptor instead.
func (*ReadArtistAlbumResponse) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{6}
}

func (x *ReadArtistAlbumResponse) GetReleases() []*Album {
	if x != nil {
		return x.Releases
	}
	return nil
}

func (x *ReadArtistAlbumResponse) GetPlaylists() []*Playlist {
	if x != nil {
		return x.Playlists
	}
	return nil
}

type DeleteArtistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteId   uint32 `protobuf:"varint,1,opt,name=siteId,proto3" json:"siteId,omitempty"`
	ArtistId string `protobuf:"bytes,2,opt,name=artistId,proto3" json:"artistId,omitempty"`
}

func (x *DeleteArtistRequest) Reset() {
	*x = DeleteArtistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteArtistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteArtistRequest) ProtoMessage() {}

func (x *DeleteArtistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteArtistRequest.ProtoReflect.Descriptor instead.
func (*DeleteArtistRequest) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteArtistRequest) GetSiteId() uint32 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

func (x *DeleteArtistRequest) GetArtistId() string {
	if x != nil {
		return x.ArtistId
	}
	return ""
}

type DeleteArtistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowsAffected int64 `protobuf:"varint,1,opt,name=rowsAffected,proto3" json:"rowsAffected,omitempty"`
}

func (x *DeleteArtistResponse) Reset() {
	*x = DeleteArtistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteArtistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteArtistResponse) ProtoMessage() {}

func (x *DeleteArtistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteArtistResponse.ProtoReflect.Descriptor instead.
func (*DeleteArtistResponse) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteArtistResponse) GetRowsAffected() int64 {
	if x != nil {
		return x.RowsAffected
	}
	return 0
}

type ClearSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteId uint32 `protobuf:"varint,1,opt,name=siteId,proto3" json:"siteId,omitempty"`
}

func (x *ClearSyncRequest) Reset() {
	*x = ClearSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearSyncRequest) ProtoMessage() {}

func (x *ClearSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearSyncRequest.ProtoReflect.Descriptor instead.
func (*ClearSyncRequest) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{9}
}

func (x *ClearSyncRequest) GetSiteId() uint32 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

type ClearSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowsAffected int64 `protobuf:"varint,1,opt,name=rowsAffected,proto3" json:"rowsAffected,omitempty"`
}

func (x *ClearSyncResponse) Reset() {
	*x = ClearSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearSyncResponse) ProtoMessage() {}

func (x *ClearSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearSyncResponse.ProtoReflect.Descriptor instead.
func (*ClearSyncResponse) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{10}
}

func (x *ClearSyncResponse) GetRowsAffected() int64 {
	if x != nil {
		return x.RowsAffected
	}
	return 0
}

type DownloadAlbumsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteId       uint32   `protobuf:"varint,1,opt,name=siteId,proto3" json:"siteId,omitempty"`
	AlbumIds     []string `protobuf:"bytes,2,rep,name=albumIds,proto3" json:"albumIds,omitempty"`
	TrackQuality string   `protobuf:"bytes,3,opt,name=trackQuality,proto3" json:"trackQuality,omitempty"`
	IsPl         bool     `protobuf:"varint,4,opt,name=isPl,proto3" json:"isPl,omitempty"`
}

func (x *DownloadAlbumsRequest) Reset() {
	*x = DownloadAlbumsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadAlbumsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadAlbumsRequest) ProtoMessage() {}

func (x *DownloadAlbumsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadAlbumsRequest.ProtoReflect.Descriptor instead.
func (*DownloadAlbumsRequest) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{11}
}

func (x *DownloadAlbumsRequest) GetSiteId() uint32 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

func (x *DownloadAlbumsRequest) GetAlbumIds() []string {
	if x != nil {
		return x.AlbumIds
	}
	return nil
}

func (x *DownloadAlbumsRequest) GetTrackQuality() string {
	if x != nil {
		return x.TrackQuality
	}
	return ""
}

func (x *DownloadAlbumsRequest) GetIsPl() bool {
	if x != nil {
		return x.IsPl
	}
	return false
}

type DownloadArtistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteId       uint32 `protobuf:"varint,1,opt,name=siteId,proto3" json:"siteId,omitempty"`
	ArtistId     string `protobuf:"bytes,2,opt,name=artistId,proto3" json:"artistId,omitempty"`
	TrackQuality string `protobuf:"bytes,3,opt,name=trackQuality,proto3" json:"trackQuality,omitempty"`
}

func (x *DownloadArtistRequest) Reset() {
	*x = DownloadArtistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadArtistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadArtistRequest) ProtoMessage() {}

func (x *DownloadArtistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadArtistRequest.ProtoReflect.Descriptor instead.
func (*DownloadArtistRequest) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{12}
}

func (x *DownloadArtistRequest) GetSiteId() uint32 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

func (x *DownloadArtistRequest) GetArtistId() string {
	if x != nil {
		return x.ArtistId
	}
	return ""
}

func (x *DownloadArtistRequest) GetTrackQuality() string {
	if x != nil {
		return x.TrackQuality
	}
	return ""
}

type DownloadAlbumsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Downloaded map[string]string `protobuf:"bytes,1,rep,name=Downloaded,proto3" json:"Downloaded,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DownloadAlbumsResponse) Reset() {
	*x = DownloadAlbumsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadAlbumsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadAlbumsResponse) ProtoMessage() {}

func (x *DownloadAlbumsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadAlbumsResponse.ProtoReflect.Descriptor instead.
func (*DownloadAlbumsResponse) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{13}
}

func (x *DownloadAlbumsResponse) GetDownloaded() map[string]string {
	if x != nil {
		return x.Downloaded
	}
	return nil
}

type DownloadTracksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Downloaded map[string]string `protobuf:"bytes,1,rep,name=Downloaded,proto3" json:"Downloaded,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DownloadTracksResponse) Reset() {
	*x = DownloadTracksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadTracksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadTracksResponse) ProtoMessage() {}

func (x *DownloadTracksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadTracksResponse.ProtoReflect.Descriptor instead.
func (*DownloadTracksResponse) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{14}
}

func (x *DownloadTracksResponse) GetDownloaded() map[string]string {
	if x != nil {
		return x.Downloaded
	}
	return nil
}

type ListArtistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteId uint32 `protobuf:"varint,1,opt,name=siteId,proto3" json:"siteId,omitempty"`
}

func (x *ListArtistRequest) Reset() {
	*x = ListArtistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListArtistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArtistRequest) ProtoMessage() {}

func (x *ListArtistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArtistRequest.ProtoReflect.Descriptor instead.
func (*ListArtistRequest) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{15}
}

func (x *ListArtistRequest) GetSiteId() uint32 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

type ListArtistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artists []*Artist `protobuf:"bytes,1,rep,name=artists,proto3" json:"artists,omitempty"`
}

func (x *ListArtistResponse) Reset() {
	*x = ListArtistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListArtistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArtistResponse) ProtoMessage() {}

func (x *ListArtistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArtistResponse.ProtoReflect.Descriptor instead.
func (*ListArtistResponse) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{16}
}

func (x *ListArtistResponse) GetArtists() []*Artist {
	if x != nil {
		return x.Artists
	}
	return nil
}

var File_artist_proto protoreflect.FileDescriptor

var file_artist_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x22, 0xaf, 0x02, 0x0a, 0x06, 0x41, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x41, 0x6c,
	0x62, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x41, 0x6c, 0x62,
	0x73, 0x12, 0x25, 0x0a, 0x06, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d,
	0x52, 0x06, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x6c, 0x62, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x6c, 0x62, 0x22, 0x95, 0x03, 0x0a, 0x05, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x49, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x22, 0xae, 0x01, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64,
	0x73, 0x22, 0x5d, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73,
	0x41, 0x64, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x64, 0x64,
	0x22, 0x3e, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73,
	0x22, 0x66, 0x0a, 0x16, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69,
	0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x65, 0x77, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x6e, 0x65, 0x77, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x74, 0x0a, 0x17, 0x52, 0x65, 0x61, 0x64,
	0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x41,
	0x6c, 0x62, 0x75, 0x6d, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x2e,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x22, 0x49,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x14, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x6f, 0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x6f, 0x77, 0x73, 0x41, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x2a, 0x0a, 0x10, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x79,
	0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x74,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49,
	0x64, 0x22, 0x37, 0x0a, 0x11, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x6f, 0x77, 0x73, 0x41, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x6f,
	0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x15, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x73, 0x50, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x50, 0x6c,
	0x22, 0x6f, 0x0a, 0x15, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x74,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x22, 0xa7, 0x01, 0x0a, 0x16, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0a,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x1a, 0x3d, 0x0a, 0x0f,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa7, 0x01, 0x0a, 0x16,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x1a, 0x3d, 0x0a, 0x0f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2b, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69,
	0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65,
	0x49, 0x64, 0x22, 0x3e, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x73, 0x32, 0x9d, 0x04, 0x0a, 0x0d, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x12, 0x19, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x53, 0x79, 0x6e, 0x63,
	0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x52, 0x65, 0x61,
	0x64, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x12, 0x1e, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49,
	0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x1b,
	0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x18, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53,
	0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x12, 0x1d, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41,
	0x6c, 0x62, 0x75, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0e,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x1d,
	0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41,
	0x6c, 0x62, 0x75, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x61, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x76, 0x30, 0x76, 0x63, 0x2f, 0x67, 0x6f, 0x2d, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x2d, 0x67,
	0x72, 0x70, 0x63, 0x3b, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_artist_proto_rawDescOnce sync.Once
	file_artist_proto_rawDescData = file_artist_proto_rawDesc
)

func file_artist_proto_rawDescGZIP() []byte {
	file_artist_proto_rawDescOnce.Do(func() {
		file_artist_proto_rawDescData = protoimpl.X.CompressGZIP(file_artist_proto_rawDescData)
	})
	return file_artist_proto_rawDescData
}

var file_artist_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_artist_proto_goTypes = []interface{}{
	(*Artist)(nil),                  // 0: artist.Artist
	(*Album)(nil),                   // 1: artist.Album
	(*Playlist)(nil),                // 2: artist.Playlist
	(*SyncArtistRequest)(nil),       // 3: artist.SyncArtistRequest
	(*SyncArtistResponse)(nil),      // 4: artist.SyncArtistResponse
	(*ReadArtistAlbumRequest)(nil),  // 5: artist.ReadArtistAlbumRequest
	(*ReadArtistAlbumResponse)(nil), // 6: artist.ReadArtistAlbumResponse
	(*DeleteArtistRequest)(nil),     // 7: artist.DeleteArtistRequest
	(*DeleteArtistResponse)(nil),    // 8: artist.DeleteArtistResponse
	(*ClearSyncRequest)(nil),        // 9: artist.ClearSyncRequest
	(*ClearSyncResponse)(nil),       // 10: artist.ClearSyncResponse
	(*DownloadAlbumsRequest)(nil),   // 11: artist.DownloadAlbumsRequest
	(*DownloadArtistRequest)(nil),   // 12: artist.DownloadArtistRequest
	(*DownloadAlbumsResponse)(nil),  // 13: artist.DownloadAlbumsResponse
	(*DownloadTracksResponse)(nil),  // 14: artist.DownloadTracksResponse
	(*ListArtistRequest)(nil),       // 15: artist.ListArtistRequest
	(*ListArtistResponse)(nil),      // 16: artist.ListArtistResponse
	nil,                             // 17: artist.DownloadAlbumsResponse.DownloadedEntry
	nil,                             // 18: artist.DownloadTracksResponse.DownloadedEntry
}
var file_artist_proto_depIdxs = []int32{
	1,  // 0: artist.Artist.albums:type_name -> artist.Album
	2,  // 1: artist.Artist.playlists:type_name -> artist.Playlist
	0,  // 2: artist.SyncArtistResponse.artists:type_name -> artist.Artist
	1,  // 3: artist.ReadArtistAlbumResponse.releases:type_name -> artist.Album
	2,  // 4: artist.ReadArtistAlbumResponse.playlists:type_name -> artist.Playlist
	17, // 5: artist.DownloadAlbumsResponse.Downloaded:type_name -> artist.DownloadAlbumsResponse.DownloadedEntry
	18, // 6: artist.DownloadTracksResponse.Downloaded:type_name -> artist.DownloadTracksResponse.DownloadedEntry
	0,  // 7: artist.ListArtistResponse.artists:type_name -> artist.Artist
	3,  // 8: artist.ArtistService.SyncArtist:input_type -> artist.SyncArtistRequest
	5,  // 9: artist.ArtistService.ReadArtistAlbums:input_type -> artist.ReadArtistAlbumRequest
	7,  // 10: artist.ArtistService.DeleteArtist:input_type -> artist.DeleteArtistRequest
	9,  // 11: artist.ArtistService.ClearSync:input_type -> artist.ClearSyncRequest
	11, // 12: artist.ArtistService.DownloadAlbums:input_type -> artist.DownloadAlbumsRequest
	12, // 13: artist.ArtistService.DownloadArtist:input_type -> artist.DownloadArtistRequest
	15, // 14: artist.ArtistService.ListArtist:input_type -> artist.ListArtistRequest
	4,  // 15: artist.ArtistService.SyncArtist:output_type -> artist.SyncArtistResponse
	6,  // 16: artist.ArtistService.ReadArtistAlbums:output_type -> artist.ReadArtistAlbumResponse
	8,  // 17: artist.ArtistService.DeleteArtist:output_type -> artist.DeleteArtistResponse
	10, // 18: artist.ArtistService.ClearSync:output_type -> artist.ClearSyncResponse
	13, // 19: artist.ArtistService.DownloadAlbums:output_type -> artist.DownloadAlbumsResponse
	13, // 20: artist.ArtistService.DownloadArtist:output_type -> artist.DownloadAlbumsResponse
	16, // 21: artist.ArtistService.ListArtist:output_type -> artist.ListArtistResponse
	15, // [15:22] is the sub-list for method output_type
	8,  // [8:15] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_artist_proto_init() }
func file_artist_proto_init() {
	if File_artist_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_artist_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Artist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Album); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Playlist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncArtistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncArtistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadArtistAlbumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadArtistAlbumResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteArtistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteArtistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadAlbumsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadArtistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadAlbumsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadTracksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListArtistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListArtistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_artist_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_artist_proto_goTypes,
		DependencyIndexes: file_artist_proto_depIdxs,
		MessageInfos:      file_artist_proto_msgTypes,
	}.Build()
	File_artist_proto = out.File
	file_artist_proto_rawDesc = nil
	file_artist_proto_goTypes = nil
	file_artist_proto_depIdxs = nil
}
